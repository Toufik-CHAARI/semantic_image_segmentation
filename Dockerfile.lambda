# Dockerfile.lambda
# Lambda Container Image for Semantic Image Segmentation API
FROM public.ecr.aws/lambda/python:3.12

# Accept AWS credentials as build arguments for DVC
ARG AWS_ACCESS_KEY_ID
ARG AWS_SECRET_ACCESS_KEY
ARG AWS_DEFAULT_REGION=eu-west-3

# Set environment variables for consistency
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

ENV TF_CPP_MIN_LOG_LEVEL=2 \
    JOBLIB_TEMP_FOLDER=/tmp \
    HF_HOME=/tmp/hf \
    TRANSFORMERS_CACHE=/tmp/hf \
    HF_DATASETS_CACHE=/tmp/hf \
    XDG_CACHE_HOME=/tmp/hf
RUN mkdir -p /tmp/hf

# Install system dependencies required for OpenCV
RUN microdnf update -y && microdnf install -y \
    glib2 \
    libSM \
    libXext \
    libXrender \
    libgomp \
    mesa-libGL \
    git \
    && microdnf clean all

# Copy requirements and install dependencies
COPY requirements-lambda.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY app.py .
COPY lambda_function.py .
COPY app/ ./app/
COPY model/ ./model/
COPY .dvc/ ./.dvc/

# Initialize git repository for DVC (required for DVC to work)
RUN git init && \
    git config user.email "docker@build.local" && \
    git config user.name "Docker Build"

# Set AWS credentials for DVC (only during build)
ENV AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
ENV AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
ENV AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION

# Pull the model using DVC from S3 (this ensures consistency with CI/CD pipeline)
RUN dvc remote add myremote s3://semantic-segmentation-models-1754924238 --force || true && \
    dvc remote modify myremote region eu-west-3 && \
    dvc pull model/unet_best.keras.dvc

# Clear AWS credentials from environment (security)
ENV AWS_ACCESS_KEY_ID=
ENV AWS_SECRET_ACCESS_KEY=
ENV AWS_DEFAULT_REGION=

# Verify model file is included
RUN ls -la model/ && echo "Model file size:" && du -h model/unet_best.keras

# Set environment variables for Lambda
ENV LOG_LEVEL=info \
    LAMBDA_MODE=true \
    HOST=0.0.0.0 \
    PORT=8000

# Set the CMD to your handler
CMD ["lambda_function.handler"] 