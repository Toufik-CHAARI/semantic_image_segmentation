# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up DVC
      uses: iterative/setup-dvc@v1
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
        
    - name: Pull models with DVC
      run: |
        dvc remote add myremote s3://semantic-segmentation-models-1754924238 || true
        dvc pull
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        
    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        black --check app/ tests/
        isort --check-only app/ tests/
        
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Test coverage threshold
      run: |
        coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
        if (( $(echo "$coverage < 90" | bc -l) )); then
          echo "Coverage is $coverage%, which is below the 90% threshold"
          exit 1
        fi
        echo "Coverage is $coverage%, which meets the 90% threshold"

  build-and-test-docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
      
    - name: Build Docker image
      run: |
        docker build \
          --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          --build-arg AWS_DEFAULT_REGION="eu-west-3" \
          -t semantic-segmentation-api:test .
        
    - name: Test Docker image
      run: |
        # Start the container
        docker run -d --name test-container -p 8000:8000 semantic-segmentation-api:test
        
        # Wait for the application to start
        sleep 15
        
        # Check if container is running
        docker ps | grep test-container || (echo "Container not running" && docker logs test-container && exit 1)
        
        # Test root endpoint
        curl -f http://localhost:8000/ || (echo "Root endpoint failed" && docker logs test-container && exit 1)
        
        # Test health endpoint
        curl -f http://localhost:8000/health || (echo "Health check failed" && docker logs test-container && exit 1)
        
        # Test info endpoint
        curl -f http://localhost:8000/info || (echo "Info check failed" && docker logs test-container && exit 1)
        
        # Test segment endpoint with test image
        curl -X POST http://localhost:8000/api/segment \
          -H "Content-Type: multipart/form-data" \
          -F "file=@frankfurt_000000_000294_leftImg8bit.png" || (echo "Segment endpoint failed" && docker logs test-container && exit 1)
        
        # Clean up
        docker stop test-container
        docker rm test-container
        
    - name: Clean up Docker images
      if: always()
      run: |
        docker rmi semantic-segmentation-api:test || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  build-production-image:
    name: Build Production Docker Image
    runs-on: ubuntu-latest
    needs: [test, build-and-test-docker, security-scan]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push Docker image to ECR
      run: |
        # Build the production image
        docker build \
          --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          --build-arg AWS_DEFAULT_REGION="eu-west-3" \
          --build-arg BUILD_TIMESTAMP="${{ github.run_id }}" \
          -t semantic-segmentation-api:production .
        
        # Tag for ECR
        docker tag semantic-segmentation-api:production ${{ steps.login-ecr.outputs.registry }}/semantic-segmentation-api:production
        
        # Push to ECR
        docker push ${{ steps.login-ecr.outputs.registry }}/semantic-segmentation-api:production
        
    - name: Output deployment information
      run: |
        echo "🎉 Production Docker image built and pushed to ECR!"
        echo "📦 Image: ${{ steps.login-ecr.outputs.registry }}/semantic-segmentation-api:production"
        echo ""
        echo "📋 Next steps for EC2 deployment:"
        echo "1. Launch EC2 instance with Docker installed"
        echo "2. Pull the image: docker pull ${{ steps.login-ecr.outputs.registry }}/semantic-segmentation-api:production"
        echo "3. Run the container: docker run -d -p 8000:8000 ${{ steps.login-ecr.outputs.registry }}/semantic-segmentation-api:production"
        echo "4. Access the API at: http://<EC2-PUBLIC-IP>:8000"

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-production-image
    if: github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Deploy to EC2
      run: |
        if [ "${{ secrets.EC2_INSTANCE_ID }}" = "" ]; then
          echo "⚠️ EC2_INSTANCE_ID not set, skipping deployment"
          exit 0
        fi
        echo "🚀 Deploying to EC2 instance: ${{ secrets.EC2_INSTANCE_ID }}"
        
        # Send deployment commands directly to EC2
        echo "Sending deployment commands to EC2..."
        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)",
            "echo \"AWS Account ID: $ACCOUNT_ID\"",
            "aws ecr get-login-password --region eu-west-3 | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.eu-west-3.amazonaws.com",
            "echo \"Stopping existing container...\"",
            "docker stop semantic-segmentation-container || true",
            "docker rm semantic-segmentation-container || true",
            "echo \"Removing old image...\"",
            "docker rmi $ACCOUNT_ID.dkr.ecr.eu-west-3.amazonaws.com/semantic-segmentation-api:production || true",
            "echo \"Pulling latest image...\"",
            "docker pull $ACCOUNT_ID.dkr.ecr.eu-west-3.amazonaws.com/semantic-segmentation-api:production",
            "echo \"Starting new container...\"",
            "docker run -d --name semantic-segmentation-container -p 8000:8000 --restart=always $ACCOUNT_ID.dkr.ecr.eu-west-3.amazonaws.com/semantic-segmentation-api:production",
            "echo \"Waiting for application to start...\"",
            "sleep 20",
            "echo \"Testing health endpoint...\"",
            "for i in {1..5}; do if curl -f http://localhost:8000/health > /dev/null 2>&1; then echo \"✅ Health check passed!\"; break; else echo \"⏳ Health check attempt $i failed, retrying...\"; sleep 5; fi; done",
            "if curl -f http://localhost:8000/health > /dev/null 2>&1; then echo \"✅ Deployment successful!\"; echo \"🌐 API is accessible at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8000\"; else echo \"❌ Deployment failed - health check failed\"; docker logs semantic-segmentation-container; exit 1; fi"
          ]' \
          --region eu-west-3
        
        echo "✅ Deployment command sent successfully!"
        
    - name: Wait for deployment completion
      run: |
        if [ "${{ secrets.EC2_INSTANCE_ID }}" = "" ]; then
          echo "⚠️ EC2_INSTANCE_ID not set, skipping deployment completion check"
          exit 0
        fi
        echo "⏳ Waiting for deployment to complete..."
        sleep 30
        
        # Get EC2 public IP
        EC2_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text \
          --region eu-west-3)
        
        echo "EC2 Public IP: $EC2_IP"
        
        # Test the deployment
        echo "🧪 Testing deployment..."
        for i in {1..3}; do
          if curl -f http://$EC2_IP:8000/health > /dev/null 2>&1; then
            echo "✅ Deployment test successful!"
            break
          else
            echo "⏳ Test attempt $i failed, retrying..."
            sleep 10
          fi
        done
        
    - name: Output deployment results
      run: |
        if [ "${{ secrets.EC2_INSTANCE_ID }}" = "" ]; then
          echo "⚠️ EC2_INSTANCE_ID not set, no deployment results to show"
          exit 0
        fi
        # Get EC2 public IP
        EC2_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text \
          --region eu-west-3)
        
        echo "🎉 Automatic deployment completed!"
        echo "🌐 API is accessible at: http://$EC2_IP:8000"
        echo "📋 API Endpoints:"
        echo "   - Health: http://$EC2_IP:8000/health"
        echo "   - Info: http://$EC2_IP:8000/info"
        echo "   - Docs: http://$EC2_IP:8000/docs"
        echo "   - Segment: http://$EC2_IP:8000/api/segment" 