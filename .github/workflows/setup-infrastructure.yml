name: Setup Infrastructure

on:
  workflow_dispatch:
    inputs:
      bucket_name:
        description: 'S3 Bucket name for DVC models'
        required: true
        default: 'semantic-segmentation-models-1754924238'
      region:
        description: 'AWS Region'
        required: true
        default: 'eu-west-3'
      setup_ecr:
        description: 'Setup ECR repository for Docker images'
        required: true
        default: true
        type: boolean

jobs:
  setup-s3:
    name: Setup S3 for DVC
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region }}
    
    - name: Create S3 bucket
      run: |
        echo "Creating S3 bucket: ${{ github.event.inputs.bucket_name }}"
        aws s3 mb s3://${{ github.event.inputs.bucket_name }} --region ${{ github.event.inputs.region }}
        echo "‚úÖ Bucket created successfully!"
    
    - name: Configure bucket versioning
      run: |
        aws s3api put-bucket-versioning \
          --bucket ${{ github.event.inputs.bucket_name }} \
          --versioning-configuration Status=Enabled
    
    - name: Configure bucket encryption
      run: |
        aws s3api put-bucket-encryption \
          --bucket ${{ github.event.inputs.bucket_name }} \
          --server-side-encryption-configuration '{
            "Rules": [
              {
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          }'
    
    - name: Configure bucket lifecycle
      run: |
        aws s3api put-bucket-lifecycle-configuration \
          --bucket ${{ github.event.inputs.bucket_name }} \
          --lifecycle-configuration '{
            "Rules": [
              {
                "ID": "DeleteOldVersions",
                "Status": "Enabled",
                "Filter": {},
                "NoncurrentVersionExpiration": {
                  "NoncurrentDays": 30
                }
              }
            ]
          }'
    
    - name: Test bucket access
      run: |
        echo "Testing bucket access..."
        aws s3 ls s3://${{ github.event.inputs.bucket_name }}/
        echo "‚úÖ Bucket access confirmed!"
    
    - name: Output S3 information
      run: |
        echo "üéâ S3 infrastructure setup complete!"
        echo "üì¶ Bucket: s3://${{ github.event.inputs.bucket_name }}"
        echo "üåç Region: ${{ github.event.inputs.region }}"

  setup-ecr:
    name: Setup ECR for Docker Images
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.setup_ecr }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region }}
    
    - name: Create ECR repositories
      run: |
        echo "Creating ECR repositories..."
        
        # Create production repository
        aws ecr create-repository \
          --repository-name semantic-segmentation-api \
          --region ${{ github.event.inputs.region }} || echo "Repository already exists"
        
        # Create staging repository
        aws ecr create-repository \
          --repository-name semantic-segmentation-api-staging \
          --region ${{ github.event.inputs.region }} || echo "Repository already exists"
        
        echo "‚úÖ ECR repositories created successfully!"
    
    - name: Configure ECR lifecycle policies
      run: |
        echo "Configuring ECR lifecycle policies..."
        
        # Lifecycle policy for production
        aws ecr put-lifecycle-policy \
          --repository-name semantic-segmentation-api \
          --lifecycle-policy-text '{
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 5 images",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["production"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }' \
          --region ${{ github.event.inputs.region }} || echo "Lifecycle policy already exists"
        
        # Lifecycle policy for staging
        aws ecr put-lifecycle-policy \
          --repository-name semantic-segmentation-api-staging \
          --lifecycle-policy-text '{
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 3 images",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["staging"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 3
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }' \
          --region ${{ github.event.inputs.region }} || echo "Lifecycle policy already exists"
        
        echo "‚úÖ ECR lifecycle policies configured!"
    
    - name: Output ECR information
      run: |
        echo "üéâ ECR infrastructure setup complete!"
        echo "üì¶ Production repository: semantic-segmentation-api"
        echo "üì¶ Staging repository: semantic-segmentation-api-staging"
        echo "üåç Region: ${{ github.event.inputs.region }}"

  output-instructions:
    name: Output Setup Instructions
    runs-on: ubuntu-latest
    needs: [setup-s3, setup-ecr]
    
    steps:
    - name: Display next steps
      run: |
        echo "üéâ Infrastructure setup complete!"
        echo ""
        echo "üìã Next steps for EC2 deployment:"
        echo ""
        echo "1. üñ•Ô∏è  Launch EC2 instance:"
        echo "   - Instance type: t3.medium or larger"
        echo "   - OS: Amazon Linux 2 or Ubuntu 20.04+"
        echo "   - Security group: Allow port 8000 (HTTP)"
        echo ""
        echo "2. üîß Install Docker on EC2:"
        echo "   # Amazon Linux 2"
        echo "   sudo yum update -y"
        echo "   sudo yum install -y docker"
        echo "   sudo systemctl start docker"
        echo "   sudo systemctl enable docker"
        echo "   sudo usermod -a -G docker ec2-user"
        echo ""
        echo "3. üîê Configure AWS credentials on EC2:"
        echo "   aws configure"
        echo ""
        echo "4. üê≥ Pull and run the Docker image:"
        echo "   docker pull <ECR-URI>/semantic-segmentation-api:production"
        echo "   docker run -d --name semantic-segmentation-container -p 8000:8000 --restart unless-stopped <ECR-URI>/semantic-segmentation-api:production"
        echo ""
        echo "5. üåê Access your API:"
        echo "   http://<EC2-PUBLIC-IP>:8000"
        echo ""
        echo "üìö Documentation:"
        echo "- API docs: http://<EC2-PUBLIC-IP>:8000/docs"
        echo "- Health check: http://<EC2-PUBLIC-IP>:8000/health"
        echo "- Info: http://<EC2-PUBLIC-IP>:8000/info"
